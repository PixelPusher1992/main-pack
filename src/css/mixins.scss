//font
@mixin font($f-color: $black, $f-size: $font-size-base) {
  color: $f-color;
  font-size: $f-size;
}

//paddings & margins
@mixin padding-vertical($pt, $pb: $pt) {
  padding-top: $pt;
  padding-bottom: $pb;
}
@mixin padding-horizontal($pl, $pr: $pl) {
  padding-left: $pl;
  padding-right: $pr;
}
@mixin margin-vertical($mt, $mb: $mt) {
  margin-top: $mt;
  margin-bottom: $mb;
}
@mixin margin-horizontal($ml, $mr: $ml) {
  margin-left: $ml;
  margin-right: $mr;
}

//vertical centering
@mixin vertical-center($align: middle) {
  display: inline-block;
  vertical-align: $align;
}

//focus, hover & active states
@mixin hover-state {
  &:hover {
    @content;
  }
}
@mixin focus-state {
  &:focus {
    @content;
  }
}
@mixin hover-focus-active-state {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

//absolute location for element
@mixin chooseCoords($coords) {
  $topVal: nth($coords, 1);
  $rightVal: nth($coords, 2);
  $bottomVal: nth($coords, 3);
  $leftVal: nth($coords, 4);
  @if type-of($topVal) == number {
    top: $topVal;
  }
  @if type-of($rightVal) == number {
    right: $rightVal;
  }
  @if type-of($bottomVal) == number {
    bottom: $bottomVal;
  }
  @if type-of($leftVal) == number {
    left: $leftVal;
  }
}

@mixin absoluteLocation($coords) {
  position: absolute;
  @include chooseCoords($coords);
}

//responsive image
@mixin responsive-image($height) {
  text-align: center;
  display: block;
  height: $height;
  line-height: $height;
  img {
    max-height: $height;
    max-width: 100%;
    height: auto;
    @include vertical-center;
  }
}

@mixin triangle($direction, $color, $size) {
  content: '';
  @include square(0);
  border-#{$direction}: $size solid $color;

  @if ($direction == top or $direction == bottom) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if ($direction == left or $direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
  }
}



//Тригонометрические функции для работы бесконечной тени
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

//Бесконечная тень
@mixin shade($type, $color: #3498db, $depth: 20, $angle: 135deg, $long: false, $fade: false) {
  $angle: ($angle - 90);
  $x: 1.5 * cos($angle) + 0px;
  $y: 1.5 * sin($angle) + 0px;
  $darken: (lightness($color)/$depth)/2;
  $opacify: 0;
  $shadow: ();

  @if $long == true{
    $darken:0;
  }

  @if $fade == true {
    $opacify: (opacity($color)/$depth) ;
  }

  @for $i from 1 through $depth {
    $shadow: $shadow, $i*$x $i*$y 0 hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));
  }
  #{$type}-shadow: $shadow;
}